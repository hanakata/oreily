第1章　テストのピラミッド
自動テストの中心となるモデル＝テストのピラミッド

筆者の経験から導き出された自動テストに対する厳しい教訓
1.全ての自動テストが同等の力を持っているわけではない。
2.ある種類のテストを書くことが出来るというだけでは必ずしもそのテストを書くべきという理由にはならない。
3.スピードとフィードバックが必要

テストのピラミッド
→3種類の異なるテスト（層）がどのように補完しあうかを示すもの
1つ目の層：UI
2つめの層：統合
3つめの層：ユニット

アプリケーションは基本的に以下3つの層で構成される
・UI
→ユーザが操作する画面とか
・サービス
→UIに表示したりするときに必要なデータを提供したり
・ロジック
→処理系

UIテスト
→UI、サービス、ロジック全てが繋がっていることを保証するテスト。
特徴
エンドツーエンド
ユーザと同じ対象を見る
高コストで遅い
→プロジェクトの中でそれほど多く使われない

統合テスト
→UIを利用せずサービス層をテストし複数の層が繋がって動作していることを確認するテスト
特徴WebサービスとAPIのテスト
各層とのつながりを確認する。
詳細さにはかける（壊れていることは分かるがどこが壊れているかは分からない。）

ユニットテスト
→ロジックのみのテスト
特徴
超高速
多目的に利用
スピードが速く正確。
統合部分の確認が弱い。

UIよりもユニットテストを優先すること
ユニットテストで埋められない部分を統合テストでカバーすること
UIテストは限定的におこなうこと

常にテストを出来る限りピラミッドの下の層に入れること
全てを自動化しようとしないこと。代わりに過不足なく自動化すること

上の層にあるテストは常に下の層にあるテストの上位集合なので重複は避けられない。
UIや統合テストではシステムのつながりを確認すること
ユニットテストは正しく実装されているかを確認すること

現在の開発環境の場合、全員が品質について責任を持つべき。
また自動テストへの取り組みは開発とテストを分けて考えていたものを一緒にするだけでなく
全てを合わせる必要がある。

チームとして開発者とテスターを分けるのであれば協力して一緒に働くことで重複した作業が減らせる。
テスター、開発者、両方とも相手の領域を少しでも理解すること。
理解できたらそれを助けられるよう協調すること。

第2章　UIテストに触れる
良いUIテストはソフトウェアの主要機能が常に稼動していることを保証するだけでなく手動テストに時間を割くことができる。
UIテストはさまざまな箇所を全て動かすことになるので高レベルなスモークテストとなる。
スモークテストとはシステムが基本的な部分で正常に動作しているか確認するテスト。

UIテストも自動化できるようコード化すべき。
ただしキャプチャーリプレイは不安定、可読性が低い、テストが整理できないといったことになるなので避けること。

UIテストを自動化するにはHTMLを使った検証とCSSを使った検証がある。
まとめ
・UIテストはエンドツーエンドのスモークテストとして有用
・キャプチャリプレイよりも手で書いたテストコードの方が望ましい
・テストでアサーションを入れるときにはHTMLタグを対象にする
・ページの要素を選択するときにはCSSセレクタを使う
・HTMLのIDがついている要素はとりやすい。

第3章　レガシーシステムにUIテストを追加する
レガシーシステムにUIテストを追加する時には以下のステップで進めること
1.正しい画面にいることを確認する
2.正しいCSSセレクタを見つける
3.アサーションを追加する

注意事項
・UIテストは疎結合にする必要がある。

第4章　統合テストで点と点を結ぶ
統合テストとは複数の層をひとつに繋げるテスト全般。
→WebアプリケーションではHTTPリクエストに対しレスポンスを確認するもの。
重要な理由は以下
・UIテストでは見つけにくい下位レベルの不具合、それも最下層のユニットテストでは
　見落とすことの多いものを見つけることが出来る。
・UIテストの堅牢性とユニットテストの機動性の間のバランスを取ってくれる。

よく使われるREST APIはURLにリソースとID等くっつけることで色々な動作を
分かりやすくまとめたもの。

第5章　RESTfulなWebサービスの統合テスト
RestfulなサービスをテストするにはまずただしいURLを生成し適切なHTTPのメソッドとデータを送信する。
HTTPのステータスコードはサーバがHTTPリクエストの成否を伝えるための仕組み
ブラウザのデベロッパーツールを使ってネットワークトラフィックは調べられる
HTTPのGETリクエストはブラウザを開いてアドレスバーにURLを入力するだけで確認できる。

第6章　ユニットテストで基礎を固める
UIテストは時間の問題だけでなく不安定で壊れやすいという問題がある。
不安定＝信頼性が低い
UIテストは何らかの問題があるという発見は出来るがどこに問題があるかという部分については何も出来ない。
こういった問題を解決するためにユニットテストを実施する必要がある。

ユニットテストはシステムに機能を追加するたびにその機能が正常に動作するかを確認するもの。
壊れる可能性のある箇所は全てテストすること
失敗するテストコードを書いてからそのテストを通すようなプロダクションコードを書くこと。

コードガバレッジ＝ユニットテストを実行したときにコードがどこを通過したかをみる指標。
コードガバレッジをあまり重要視しないこと。テスト7、コードガバレッジ3ぐらいがちょうどいい。

仮にネットワーク越しのサービスを利用したサービスを作成しようとした場合、
既にネットワークを介して情報を取得している体でテストを実施すること。
相手からレスポンスを受けての動作確認をする場合はモックを作成すること。

・ユニットテストはテストのピラミッドの基礎
・ユニットテストは非常に高速に実行できるので迅速なフィードバックが可能
・局所的なものが多いのでネットワーク接続するような処理は避ける。
・モック化はテストしたいコードがアクセス困難な場所にアクセスするタイプのものでもテスト可能にする手法。

第7章 JavaScriptを使ったブラウザ上のユニットテスト
JavaScriptを利用したテストはUI＋ユニットテストが必要になる。※クライアントサイドで動作する場合
Javascript解析の手順
・HTMLを調べる
→どこでJavascriptを利用しているか確認する
・Javascriptを解析する
・テストを書く

重要なこと
・ブラウザ上で起きていることはユニットテストで確認できる。
・UIテストは必ずしもエンドツーエンドである必要はない。

第8章 ピラミッドを登る
テストはユニットテストから始める。
→基本的な考え方として壊れる可能性のあるものは全てテストする。
　→すなわち全てのテストは出来ないことを意識しておく。
統合テストではユニットテストでカバーしきれない隙間を見る。
その後UIテストをすることによりエンドツーエンドでシステムを確認する。

この構造が逆になる場合もある。＝通称逆ピラミッド
手近なツールで実施できるUIテストばかりに寄ってしまう現象。

巨大なレガシーシステムの場合には逆ピラミッドが意味を持つ可能性もある。
→ないよりマシ
不安定なテストはテストの完了を遅くし多くの時間を無駄にする
→不安定なテストとは＝信頼性の低いテスト
不安定なテストに対する対策は以下の通り
・テストを書き直す
・テストをピラミッドの下の層へ動かす
・そのテストをやらない

第9章 プログラミング初級講座
知ってた

第10章　テストを整理する
テストを分離する＝テストコードを書く際に1度にテストする内容をひとまとまりの概念に限る
1つのテストにつき1つのアサーションというのは目標としてよいが
複数のアサーションが必要ならそれを入れてもかまわない。
重要なのは1つのテストにつきテストをする内容はひとつであること。

テストをまとめるには似ているものはまとめた方がよい。

新しいテストケースが出てきた場合は既存に追加しても新しくテスト用のファイルを作成してもよい。
どっちがチームにとって楽かを考える。

第11章 効果的なモックの活用
モックとは自動テストで実際のオブジェクトを置き換えて使うダミーのオブジェクトのこと。
本番に接続できない場合や都合の良いテストが本番では出来ない場合（エラーなど）使うとよい。
ちなみに似たようなものでスタブがあるが、それは切り替え。

結合度とは2つのオブジェクトのつながりの強さを表す度合い。
あまりに結合度が高すぎるとオブジェクトだけでなくモックやエクスペクテーションなど
全てが結合されて身動きが取れなくなってしまう状態になる。
→モックの泥沼

ポートとアダプタ
→アプリケーションのコアな機能と外部とのやり取りを分離する考え方
ブラックボックス化には繋がる
ブラックボックスにちかいテストのメリット
・本物のオブジェクトを使える
・結合度が下がる
・変更がしやすい
・カバレッジが高い
・バグの少ないテストになりやすい

第12章　テストファースト
TDD（テスト駆動開発）とはプロダクションコードを追加する前にテストを書く。
ストレスと戦うためには必須。
TDDでやることで1つのことにフォーカスすることができる。