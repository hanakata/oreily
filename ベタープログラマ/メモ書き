1章
・優れたコードを書くために優れたコードを気にかけること。
　時間と努力は投資すること。
・コードに対する情緒的な反応は悪いことではない。ダメなものはダメ。
やってみること
　プログラミングのスキルを向上させることを誓う。

2章
・コードのレイアウトについて争うのをやめる。自分のコードには健全に。
・優れたコードの表現はコードの意図を明らかにする。
・コードの誤りを作り出さないようにするには優れた表現が必要。アスキーアートはいらない。
・誰のためにコードを書いているかを忘れないこと。
・表現と振る舞いを一緒に変更しないこと。
やってみること
　レイアウトの好みをもう一度考えてみる。

3章
・少ないコードは多くのソフトウェアになる。
・コードを明瞭かつ簡潔に表現すること
・コードをコピーしない。関数にする。差異があるならパラメータ。
・複製を見つけたら取り除く。
・コメント全てがコードに価値を付加しているかを確認すること。
・コメントアウトすることでコードを削除しない。
・毎日コードをよくすること。
やること
　冗長で重複したコード、長いコード部分を見つけるため批判的にみること。
　見つけたら取り除くこと。

4章
・コードを追加することでも改善出来る。削除することでも改善出来る。
・どこであろうと可能な限り死んでいるコードは取り除くこと。
・将来必要になるかもしれないコードは消しても問題ない。
・コードを綺麗にするのは機能変更とは別にコミットする。
やること
　死んでいて必要のないコードを探して削除すること。

5章
・古いコードを見返してみるとスキル向上が分かる。
やること
　昔のコードを見返してどこまで成長したか確認すること。

6章
・コードへの最善の航路は既に知っている人に導いてもらうこと
・健全なプログラムはコードベース全体を得るために単一のチェックアウトを必要としどこでも動く。
・健全なプログラムはひとつのステップで行われる。
・システムは理想的な設計とは異なるのでコードを常に信頼すること。
・コードを学ぶためにはコードを修正する。
やること
　新しいコードに取り組むときには心をこめて計画すること。

7章
・ひどいコードに備えること
・ひどいコードを見ても嫌悪感を抑え改善する方法を考えること。
・ひどいコードを直すかどうかをしっかり選ぶこと。
・何かのコードに触れる時はよりよくすること。
・コードの変更はゆっくりと。
・出来の悪いコードを咎める必要はない。
やること
　自分が触れたコードは少しでもよりよい形になるように修正すること。

8章
・可能性のあるエラーを無視しないこと
・規律を守って例外を上手く使うこと
やること
　頻繁に手が加わっているコードとほとんど手が加わっていないコードを見比べて
　エラー処理の数を確認する。

9章
・全ての可能性のあるコードのパスを考えること。後回しにしない。
やること
　最後に取り組んだコードを調べてエラー処理と可能性のある異常に
　どのくらい取り組んだか確認すること

10章
・健全なエンジニアリングを行いコードにバグが紛れ込む事を防ぐ。
・アサーションとログはしっかり利用すること
・結果にすばやく到達するために問題空間を二分探索すること。
・テストされていないコードはバグの温床
・デバッガを上手く使うこと
・出来るだけ早くバグを修正すること
やること
　次にバグに出会ったら秩序だった方法を試してみる。

11章
・ソフトウェア開発を改善し問題の発生に気づくためには迅速なフィードバックが必要
・ソフトウェアスタックと開発プロセスのすべてのレベルでテストが必要。
・テスト対象のコードを書きながらテストを書く
・テストを早い段階で頻繁に実行する
・開発テストが優れていても周到なQAテストを置き換えられるわけではない。
・酷いテストは負債
・テスト一式を保守しテストが行なっていることに注意を払う
・グローバル変数とシングルトンのオブジェクトは信頼性の高いテストに対して禁物
・コードをテスト可能にすること
やること
　コードに対する単体テストを書き始めること

12章
やること
　不必要な複雑さをどのようにコードにいれこんでしまったかを考えること。

13章
・貧弱な会社構造と不健全な開発プロセスは貧弱なソフトウェアアーキテクチャとして映し出される。
・ソフトウェアの品質を維持すること
・開発チーム内での人間関係の健全さはソフトウェア設計に関係する。
・優れた設計は接続機構とコンポーネント間の接続を考慮している。
・曖昧なアーキテクチャは下手に書かれたうえに一緒には上手くかみ合わないものを作り出す。
・ひどいアーキテクチャの結果はコードだけでなく色々なものに影響を与える
・はっきりしたアーキテクチャ設計は首尾一貫したシステムをもたらす
・はっきりとしたアーキテクチャは機能の重複を減らす
・ソフトウェアのアーキテクチャは変更出来るもの
・設計上の決定を行う必要が出てくるまで遅らせる
・設計の品質を維持すること
・システムに対して自動化された優れたテスト一式をもつこと。
・コードの単体テストは優れたソフトウェア設計をもたらす
・優れたプロジェクト計画は優れた設計をもたらす
・チームの構成はチームが作り出すコードに避けがたい影響を与える
やること
　現在のプロジェクトについて外部の人に説明する場合、何が自慢できて何を改善出来るかを
　説明するか考えてみる。

14章
・ひときわ優れたコードを書くために優れた美的感覚が必要
・優れたソフトウェア開発は思いついた最初のコードを投げ込むような方法ではない
・優れたプログラマは謙虚さを持っているものであり、無知を知っている。
やること
　注力するべき領域を考えること

15章
・プログラミングのチームはひと揃いの規則を持つ
・曖昧で記述されていないチームの規則に頼らない
やること
　ソフトウェア開発に対するチームの規則を文書化すること

16章
・単純なコードを設計するには努力が必要
・単純な設計が目指しているのは誤用を防ぐこと
・単純な設計はできる限り小さくなる
・一貫性は明瞭性を生み出す
・根本原因に対してバグ修正を適用する
・コードでは暗黙の想定を避ける
・必要とされる量だけのコードを書くようにする
やること
　コードの修正がコードの単純さへ寄与しているかを調べてみる

17章
・立ち止まって考える
・間違いと酷いコーディングを認める
・注意を払うこと
・頭を使う勇気を持つこと
やること
　仕事をしながら注意を払う

18章
・コードに防腐処理を施さないこと
・ソフトウェアの主人は自分。なので自分の支配下にあるという意識をもつこと
・コードを修正するには勇気とスキルが必要
・優れたコードは誰か他人の問題ではない。自身で改善すること
・一度に広範囲にわたるコード変更ではなく小さく実施すること
・自動化されたテストは重要な安全装置
やること
　誰も触りたがらないプロジェクト内のコードを特定すること

19章
・コピー＆ペーストは避けること。
・ウェブで見つけたコードをそのまま利用しないこと
・開発者が気の利いた共有ライブラリを作りたいという理由ではなく複数のクライアントに
　役立つという理由でコードは共有されるべき。
・他人のコードを退けないこと。
やること
　汎用的にするのではなく役立つロジックの基本的な部分だけを維持する方法を考える。

20章
・バージョンコントロールを利用すること
・ソフトウェアのプロジェクトを構成しているすべてのファイルをバージョン管理すること。
　ただし不要なものはいれない。
・変更を小さく、頻繁にコミットすること
・ソースコードはVCSに住んでいると考えること
やること
　コミットの品質に注意を払うこと。

21章
・ソフトウェア開発を直線的なプロセスとみなすのは間違い
・開発とテストの間での人為的な隔離が拡大することに注意
・不健全なチームのやり取りは不健全なコードになる
・QAチームへのビルドを注意深く作成しないことはテスターに敬意を払っていないのと同じ
・ビルドの作成を急がない
・テスターが障害を見つけたなら自身のバグである
・障害報告を個人攻撃だと捉えないこと
・QAチームへ健全な敬意を払うこと
・QAチームは品質の唯一の責任者ではない
やること
　QAチームと密に協業すること

22章
・コード凍結は変更が行われることが想定されないリリース前の期間
・コード凍結は誤解を招く言葉
・最終的な修正と変更を注意深く管理しながらリリースするために開発作業を減速させる
・ブランチを使うこと
・さらに良いものにできると分かっているソフトウェアを出荷することは異常ではない
・コード凍結中は技術的負債をまとめること
・唯一のコード凍結は受け入れ可能なコードになったとき
・凍結せずに常に製品へリリースできるコードを目指す
やること
　リリースプロセスを改善する方法を検討する

23章
・ソフトウェアリリースを作成するには規律と計画が必要
・まっさらなチェックアウトでソフトウェアをビルドすること
・ビルドがプロセスの全てを自動化する1つの単純なステップになるようにすること
・健全さを保つためにCIサーバにビルドさせること
・最終成果物をテストせずにリリースしないこと
・ソフトウェアリリースプロセスを計画して構築すること
やること
　プロジェクトのビルドとリリースのプロセスを評価すること

24章
・継続的に学習すること
・学習を楽しむこと
・学習は狭い領域になりやすいので視野を広く持つこと
・学習の質を向上するためできる限り多くの情報を活用すること
・学びながらメモを取ること
・目的を持って知識ポートフォリオを管理すること
・ある話題を学ぶために人に教えること
・学んだばかりのことを使うようなプロジェクトを作成すること
やること
　自分の学習に責任を持つこと。向上すること。

25章
・有能な状態になったときに自己満足にならないよう注意すること
やること
　自分の癖を変えるためにどうすれば良いか考えること

26章
やること
　取り組みたいことを検討すること

27章
・停滞することに警戒すること
・スキルの道具箱を大きくするために時間と労力を投資すること
やること
　停滞しないと誓うこと

28章
・自分が必要不可欠になるためのコードを書かないこと
・ソフトウェアライセンスを守ること
・コードベース内で再利用した成果について作者の表示を行うこと
・コードに対する優れた態度は他のプログラマに対する優れた態度である
・ほかの人の人生を悪くするようなソフトウェアを書かないこと
・自分にして欲しいと思う接し方をすること
・倫理的なプログラマは品質に責任を持つ
・疲れきったプログラマは誰の役にも立たない。
やること
　この章で述べられた問題を再考すること

29章
・特定の分野しか知らない開発者にならないこと
・優れたプログラマは複数の言語を知っておりイデオムも知っているので広範囲に渡る解決法を持っている
・自分が使っているプログラミング言語で開発することは毎日行う必要がある。
・あなたの言語を愛する
・ある言語で最善のコードを書くためには独自ではなくその言語のスタイルとイデオムに従うこと
・すぐれた開発者は優れた会話ができる
・一晩で言語が習得できるはずがない
やること
　好きな言語と関係を深める方法を考える。

30章
・自分自身を気にかける
やること
　自分のワークステーションがどう設置されているか調べること。姿勢を良くすること

31章
・一から自分でかかず既存を使うこと。
・最初に最も重要なことに集中すること
・KISS（単純に保て、お馬鹿さん）を忘れない
・頻繁にやることは自動化
やること
　生産性の高いプログラマに役立つ事を3つ挙げる。そのうち2つは新たにやる習慣、
　もう1つは止める習慣。

32章
・大きなタスクを小さく理解出来るタスクに分解する。
・完了を定義する
・完了がいつかが分からなければ始めない
・コードが完成していることを定義するためにテストを活用する
・必要以上にやらない。
やること
　現在のタスクをレビューする

33章
・他の人に対する説明責任を持つこと
・問題に直面したときは2つ以上の解決方法を考えること
やること
　取り組み計画を立てること

34章
・意図を持って優れた人と仕事をすること
やること
　優れた人と働くための方策を考えること

35章
・ほかの人に対する説明責任を持つことは品質を向上させる。
・コードは誰かが読むと意識すること
やること
　説明責任を持てる同僚を見つける

36章
・コードはコンピュータとのコミュニケーション
・コードはほかの人とのコミュニケーション
・コメントを増やしたからといって読みやすくなるわけではない。
・コードが上手く伝わるかは言語の仕様次第。
・様々なコミュニケーションのやり方を習得すること
・適切な人たちと正しい用語を使う
・効果的なコミュニケーションには集中力が必要
・優れたコミュニケーションは優れたコードを促進する
・効果的なチームワークを生み出すために健全な態度で誠実に話すこと
やること
　人と話している自分を観察すること

37章
・開発の方法論や流行を学ぶこと
・実用的だと思うマニュフェストに署名すること
やること
　マニュフェストを読む

38章
・多くの場合、開発の扱いにくい部分は技術ではなく人。
・コードを気にかけない人がいても自身は健全な態度でいること
やること
　悪い癖を身に付けていないか振りかえること

結び
・自分の態度が成長に影響する
やること
　数ヶ月後にこの本を読み返してみる